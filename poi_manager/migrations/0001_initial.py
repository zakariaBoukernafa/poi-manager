# Generated by Django 5.2.6 on 2025-09-03 16:22

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import poi_manager.utils
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='ImportBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_path', models.CharField(max_length=500, verbose_name='File Path')),
                ('file_name', models.CharField(max_length=255, verbose_name='File Name')),
                (
                    'file_type',
                    models.CharField(
                        choices=[('csv', 'CSV'), ('json', 'JSON'), ('xml', 'XML')],
                        max_length=10,
                        verbose_name='File Type',
                    ),
                ),
                ('file_size', models.BigIntegerField(blank=True, null=True, verbose_name='File Size (bytes)')),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('pending', 'Pending'),
                            ('processing', 'Processing'),
                            ('completed', 'Completed'),
                            ('failed', 'Failed'),
                            ('partial', 'Partially Completed'),
                        ],
                        db_index=True,
                        default='pending',
                        max_length=20,
                        verbose_name='Status',
                    ),
                ),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('records_processed', models.IntegerField(default=0, verbose_name='Records Processed')),
                ('records_failed', models.IntegerField(default=0, verbose_name='Records Failed')),
                ('records_skipped', models.IntegerField(default=0, verbose_name='Records Skipped (Duplicates)')),
                ('error_log', models.JSONField(blank=True, default=dict, verbose_name='Error Log')),
                ('processing_time', models.DurationField(blank=True, null=True, verbose_name='Processing Time')),
                (
                    'job_id',
                    models.CharField(
                        blank=True, help_text='RQ Job ID for async processing', max_length=255, verbose_name='RQ Job ID'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Import Batch',
                'verbose_name_plural': 'Import Batches',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='PointOfInterest',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True, verbose_name='last updated')),
                (
                    'custom_field_data',
                    models.JSONField(blank=True, default=dict, encoder=poi_manager.utils.CustomFieldJSONEncoder),
                ),
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Internal ID')),
                (
                    'external_id',
                    models.CharField(
                        db_index=True,
                        help_text='Original ID from the source file',
                        max_length=255,
                        unique=True,
                        verbose_name='External ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        db_index=True,
                        help_text='Name of the point of interest',
                        max_length=500,
                        verbose_name='POI Name',
                    ),
                ),
                (
                    'category',
                    models.CharField(
                        db_index=True,
                        help_text='Category of the POI (e.g., restaurant, beach, bus-stop)',
                        max_length=100,
                        verbose_name='Category',
                    ),
                ),
                (
                    'location',
                    django.contrib.gis.db.models.fields.PointField(
                        geography=True,
                        help_text='Geographic coordinates of the POI',
                        srid=4326,
                        verbose_name='Location',
                    ),
                ),
                (
                    'latitude',
                    models.DecimalField(
                        decimal_places=7,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name='Latitude',
                    ),
                ),
                (
                    'longitude',
                    models.DecimalField(
                        decimal_places=7,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                        verbose_name='Longitude',
                    ),
                ),
                (
                    'ratings',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(
                            validators=[
                                django.core.validators.MinValueValidator(0),
                                django.core.validators.MaxValueValidator(5),
                            ]
                        ),
                        blank=True,
                        default=list,
                        help_text='Array of individual ratings',
                        size=None,
                        verbose_name='Ratings',
                    ),
                ),
                (
                    'avg_rating',
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text='Calculated average of all ratings',
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name='Average Rating',
                    ),
                ),
                (
                    'rating_count',
                    models.IntegerField(default=0, help_text='Number of ratings', verbose_name='Rating Count'),
                ),
                (
                    'description',
                    models.TextField(
                        blank=True, help_text='Additional description from JSON files', verbose_name='Description'
                    ),
                ),
                (
                    'source_file',
                    models.CharField(
                        help_text='Name of the file this POI was imported from',
                        max_length=255,
                        verbose_name='Source File',
                    ),
                ),
                (
                    'import_batch',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='pois',
                        to='poi_manager.importbatch',
                        verbose_name='Import Batch',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Point of Interest',
                'verbose_name_plural': 'Points of Interest',
                'ordering': ['name', 'category'],
                'indexes': [
                    models.Index(fields=['category', 'avg_rating'], name='poi_manager_categor_79abad_idx'),
                    models.Index(fields=['external_id'], name='poi_manager_externa_a05a0c_idx'),
                    models.Index(fields=['name'], name='poi_manager_name_a7717c_idx'),
                ],
            },
        ),
    ]
